// <auto-generated />
using System;
using ISH.Repository;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ISH.Repository.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    partial class ApplicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ISH.Data.Authentication.User", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Guid");

                    b.ToTable("User");
                });

            modelBuilder.Entity("ISH.Data.Cart.Cart", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CartPrice")
                        .HasColumnType("int");

                    b.Property<Guid>("UserGuid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Guid");

                    b.HasIndex("UserGuid");

                    b.ToTable("carts");
                });

            modelBuilder.Entity("ISH.Data.MovieGenre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("MovieGenre");
                });

            modelBuilder.Entity("ISH.Data.Orders.Order", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OrderNumber")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OrderedByGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TotalPrice")
                        .HasColumnType("int");

                    b.HasKey("Guid");

                    b.HasIndex("OrderedByGuid");

                    b.ToTable("orders");
                });

            modelBuilder.Entity("ISH.Data.Orders.OrderItem", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ItemPrice")
                        .HasColumnType("int");

                    b.Property<string>("MovieName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OrderGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("TicketPrice")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeSlot")
                        .HasColumnType("datetime2");

                    b.HasKey("Guid");

                    b.HasIndex("OrderGuid");

                    b.ToTable("orderItems");
                });

            modelBuilder.Entity("ISH.Data.Tickets.Ticket", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BoughtByGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CartGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int>("SeatNumber")
                        .HasColumnType("int");

                    b.Property<string>("TicketStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ViewSlotGuid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Guid");

                    b.HasIndex("BoughtByGuid");

                    b.HasIndex("CartGuid");

                    b.HasIndex("ViewSlotGuid");

                    b.ToTable("tickets");
                });

            modelBuilder.Entity("ISH.Data.Tickets.ViewSlot", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.Property<string>("MovieName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TimeSlot")
                        .HasColumnType("datetime2");

                    b.HasKey("Guid");

                    b.HasIndex("GenreId");

                    b.ToTable("viewSlots");
                });

            modelBuilder.Entity("ISH.Data.Cart.Cart", b =>
                {
                    b.HasOne("ISH.Data.Authentication.User", "User")
                        .WithMany()
                        .HasForeignKey("UserGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ISH.Data.Orders.Order", b =>
                {
                    b.HasOne("ISH.Data.Authentication.User", "OrderedBy")
                        .WithMany()
                        .HasForeignKey("OrderedByGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrderedBy");
                });

            modelBuilder.Entity("ISH.Data.Orders.OrderItem", b =>
                {
                    b.HasOne("ISH.Data.Orders.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("ISH.Data.Tickets.Ticket", b =>
                {
                    b.HasOne("ISH.Data.Authentication.User", "BoughtBy")
                        .WithMany()
                        .HasForeignKey("BoughtByGuid");

                    b.HasOne("ISH.Data.Cart.Cart", null)
                        .WithMany("Tickets")
                        .HasForeignKey("CartGuid");

                    b.HasOne("ISH.Data.Tickets.ViewSlot", "ViewSlot")
                        .WithMany()
                        .HasForeignKey("ViewSlotGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BoughtBy");

                    b.Navigation("ViewSlot");
                });

            modelBuilder.Entity("ISH.Data.Tickets.ViewSlot", b =>
                {
                    b.HasOne("ISH.Data.MovieGenre", "Genre")
                        .WithMany()
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("ISH.Data.Cart.Cart", b =>
                {
                    b.Navigation("Tickets");
                });
#pragma warning restore 612, 618
        }
    }
}
